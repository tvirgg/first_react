{"ast":null,"code":"import { useMemo } from 'react';\nexport const dataValue = (dataItem, field) => {\n  if (typeof field === 'function') return field(dataItem);\n  if (dataItem == null) return dataItem;\n  if (typeof field === 'string' && typeof dataItem === 'object' && field in dataItem) return dataItem[field];\n  return dataItem;\n};\nexport const dataText = (dataItem, textField) => {\n  const value = dataValue(dataItem, textField);\n  return value == null ? '' : String(value);\n};\n/**\n * I don't know that the shallow equal makes sense here but am too afraid to\n * remove it.\n */\n\nexport function valueMatcher(a, b, dataKey) {\n  return dataValue(a, dataKey) === dataValue(b, dataKey);\n}\nexport function dataIndexOf(data, value, dataKey) {\n  const valueDataKey = dataValue(value, dataKey);\n  let idx = -1;\n\n  while (++idx < data.length) {\n    const datum = data[idx];\n    if (datum === value || dataValue(datum, dataKey) === valueDataKey) return idx;\n  }\n\n  return -1;\n}\nexport function dataItem(data, value, dataKey) {\n  const idx = dataIndexOf(data, value, dataKey); // This isn't strictly safe, but we want to allow items that aren't in the list\n\n  return idx !== -1 ? data[idx] : value;\n}\nexport const useAccessors = (textField, dataKey) => {\n  return useMemo(() => ({\n    text: item => dataText(item, textField),\n    value: item => dataValue(item, dataKey),\n    indexOf: (data, value) => dataIndexOf(data, value, dataKey),\n    matches: (a, b) => valueMatcher(a, b, dataKey),\n    findOrSelf: (data, value) => dataItem(data, value, dataKey),\n    includes: (data, value) => dataIndexOf(data, value, dataKey) !== -1\n  }), [textField, dataKey]);\n};","map":{"version":3,"sources":["C:/Users/Kainar_malay/Desktop/git_partfolio/kainar_present/first_react/node_modules/react-widgets/esm/Accessors.js"],"names":["useMemo","dataValue","dataItem","field","dataText","textField","value","String","valueMatcher","a","b","dataKey","dataIndexOf","data","valueDataKey","idx","length","datum","useAccessors","text","item","indexOf","matches","findOrSelf","includes"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC5C,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC,OAAOA,KAAK,CAACD,QAAD,CAAZ;AACjC,MAAIA,QAAQ,IAAI,IAAhB,EAAsB,OAAOA,QAAP;AACtB,MAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,OAAOD,QAAP,KAAoB,QAAjD,IAA6DC,KAAK,IAAID,QAA1E,EAAoF,OAAOA,QAAQ,CAACC,KAAD,CAAf;AACpF,SAAOD,QAAP;AACD,CALM;AAMP,OAAO,MAAME,QAAQ,GAAG,CAACF,QAAD,EAAWG,SAAX,KAAyB;AAC/C,QAAMC,KAAK,GAAGL,SAAS,CAACC,QAAD,EAAWG,SAAX,CAAvB;AACA,SAAOC,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBC,MAAM,CAACD,KAAD,CAAlC;AACD,CAHM;AAIP;;;;;AAKA,OAAO,SAASE,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,OAA5B,EAAqC;AAC1C,SAAOV,SAAS,CAACQ,CAAD,EAAIE,OAAJ,CAAT,KAA0BV,SAAS,CAACS,CAAD,EAAIC,OAAJ,CAA1C;AACD;AACD,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BP,KAA3B,EAAkCK,OAAlC,EAA2C;AAChD,QAAMG,YAAY,GAAGb,SAAS,CAACK,KAAD,EAAQK,OAAR,CAA9B;AACA,MAAII,GAAG,GAAG,CAAC,CAAX;;AAEA,SAAO,EAAEA,GAAF,GAAQF,IAAI,CAACG,MAApB,EAA4B;AAC1B,UAAMC,KAAK,GAAGJ,IAAI,CAACE,GAAD,CAAlB;AACA,QAAIE,KAAK,KAAKX,KAAV,IAAmBL,SAAS,CAACgB,KAAD,EAAQN,OAAR,CAAT,KAA8BG,YAArD,EAAmE,OAAOC,GAAP;AACpE;;AAED,SAAO,CAAC,CAAR;AACD;AACD,OAAO,SAASb,QAAT,CAAkBW,IAAlB,EAAwBP,KAAxB,EAA+BK,OAA/B,EAAwC;AAC7C,QAAMI,GAAG,GAAGH,WAAW,CAACC,IAAD,EAAOP,KAAP,EAAcK,OAAd,CAAvB,CAD6C,CACE;;AAE/C,SAAOI,GAAG,KAAK,CAAC,CAAT,GAAaF,IAAI,CAACE,GAAD,CAAjB,GAAyBT,KAAhC;AACD;AACD,OAAO,MAAMY,YAAY,GAAG,CAACb,SAAD,EAAYM,OAAZ,KAAwB;AAClD,SAAOX,OAAO,CAAC,OAAO;AACpBmB,IAAAA,IAAI,EAAEC,IAAI,IAAIhB,QAAQ,CAACgB,IAAD,EAAOf,SAAP,CADF;AAEpBC,IAAAA,KAAK,EAAEc,IAAI,IAAInB,SAAS,CAACmB,IAAD,EAAOT,OAAP,CAFJ;AAGpBU,IAAAA,OAAO,EAAE,CAACR,IAAD,EAAOP,KAAP,KAAiBM,WAAW,CAACC,IAAD,EAAOP,KAAP,EAAcK,OAAd,CAHjB;AAIpBW,IAAAA,OAAO,EAAE,CAACb,CAAD,EAAIC,CAAJ,KAAUF,YAAY,CAACC,CAAD,EAAIC,CAAJ,EAAOC,OAAP,CAJX;AAKpBY,IAAAA,UAAU,EAAE,CAACV,IAAD,EAAOP,KAAP,KAAiBJ,QAAQ,CAACW,IAAD,EAAOP,KAAP,EAAcK,OAAd,CALjB;AAMpBa,IAAAA,QAAQ,EAAE,CAACX,IAAD,EAAOP,KAAP,KAAiBM,WAAW,CAACC,IAAD,EAAOP,KAAP,EAAcK,OAAd,CAAX,KAAsC,CAAC;AAN9C,GAAP,CAAD,EAOV,CAACN,SAAD,EAAYM,OAAZ,CAPU,CAAd;AAQD,CATM","sourcesContent":["import { useMemo } from 'react';\nexport const dataValue = (dataItem, field) => {\n  if (typeof field === 'function') return field(dataItem);\n  if (dataItem == null) return dataItem;\n  if (typeof field === 'string' && typeof dataItem === 'object' && field in dataItem) return dataItem[field];\n  return dataItem;\n};\nexport const dataText = (dataItem, textField) => {\n  const value = dataValue(dataItem, textField);\n  return value == null ? '' : String(value);\n};\n/**\n * I don't know that the shallow equal makes sense here but am too afraid to\n * remove it.\n */\n\nexport function valueMatcher(a, b, dataKey) {\n  return dataValue(a, dataKey) === dataValue(b, dataKey);\n}\nexport function dataIndexOf(data, value, dataKey) {\n  const valueDataKey = dataValue(value, dataKey);\n  let idx = -1;\n\n  while (++idx < data.length) {\n    const datum = data[idx];\n    if (datum === value || dataValue(datum, dataKey) === valueDataKey) return idx;\n  }\n\n  return -1;\n}\nexport function dataItem(data, value, dataKey) {\n  const idx = dataIndexOf(data, value, dataKey); // This isn't strictly safe, but we want to allow items that aren't in the list\n\n  return idx !== -1 ? data[idx] : value;\n}\nexport const useAccessors = (textField, dataKey) => {\n  return useMemo(() => ({\n    text: item => dataText(item, textField),\n    value: item => dataValue(item, dataKey),\n    indexOf: (data, value) => dataIndexOf(data, value, dataKey),\n    matches: (a, b) => valueMatcher(a, b, dataKey),\n    findOrSelf: (data, value) => dataItem(data, value, dataKey),\n    includes: (data, value) => dataIndexOf(data, value, dataKey) !== -1\n  }), [textField, dataKey]);\n};"]},"metadata":{},"sourceType":"module"}