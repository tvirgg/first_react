{"ast":null,"code":"import * as axios from \"axios\";\nconst instance = axios.create({\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"fa719772-b24e-4ef6-9c60-7967252f265b\"\n  },\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/'\n});\nexport const UserAPI = {\n  getUsers(currentPage = 1, pageSize = 10) {\n    return instance.get(`users?page=${currentPage}&cout=${pageSize}`, {}, {}).then(response => response.data);\n  },\n\n  Follow(userId) {\n    return instance.post(`follow/${userId}`);\n  },\n\n  Unfollow(userId) {\n    return instance.delete(`follow/${userId}`);\n  },\n\n  getProfile(userId) {\n    return axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId);\n  },\n\n  getStatus(userId) {\n    return axios.get(`https://social-network.samuraijs.com/api/1.0/profile/status/` + userId);\n  },\n\n  updateStatus(status) {\n    return instance.put(`profile/status`, {\n      status: status\n    });\n  },\n\n  saveProfile(profile) {\n    return instance.put(`profile`, profile);\n  },\n\n  savePhoto(photoFile) {\n    const formData = new FormData();\n    formData.append(\"image\", photoFile); //создаем объект и вставляем в него элемент image со значение нашего файла\n\n    return instance.put(`profile/photo`, formData, {\n      //отправляем на profile/photo наш объект, а так же другой объект с элементом Content-Type и значением 'multipart/form-data'//особенности синтексиса для сервака\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n\n  authrequire() {\n    return instance.get(`auth/me`);\n  },\n\n  login(email, password, rememberMe = false, captcha = null) {\n    return instance.post(`auth/login`, {\n      email,\n      password,\n      rememberMe,\n      captcha\n    });\n  },\n\n  logout() {\n    return instance.delete(`auth/login`);\n  },\n\n  getCaptchaUrl() {\n    return instance.get(`security/get-captcha-url`);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Kainar_malay/Desktop/git_partfolio/kainar_present/first_react/src/components/users/Api.js"],"names":["axios","instance","create","withCredentials","headers","baseURL","UserAPI","getUsers","currentPage","pageSize","get","then","response","data","Follow","userId","post","Unfollow","delete","getProfile","getStatus","updateStatus","status","put","saveProfile","profile","savePhoto","photoFile","formData","FormData","append","authrequire","login","email","password","rememberMe","captcha","logout","getCaptchaUrl"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,eAAe,EAAE,IADS;AAE1BC,EAAAA,OAAO,EAAE;AACL,eAAW;AADN,GAFiB;AAK1BC,EAAAA,OAAO,EAAE;AALiB,CAAb,CAAjB;AAOA,OAAO,MAAMC,OAAO,GAAE;AAClBC,EAAAA,QAAQ,CAACC,WAAW,GAAE,CAAd,EAAiBC,QAAQ,GAAG,EAA5B,EAA+B;AACnC,WAAOR,QAAQ,CAACS,GAAT,CAAc,cAAaF,WAAY,SAAQC,QAAS,EAAxD,EACH,EADG,EAGA,EAHA,EAGIE,IAHJ,CAGSC,QAAQ,IAAIA,QAAQ,CAACC,IAH9B,CAAP;AAIH,GANiB;;AAOlBC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,WAAOd,QAAQ,CAACe,IAAT,CAAe,UAASD,MAAO,EAA/B,CAAP;AACH,GATiB;;AAUlBE,EAAAA,QAAQ,CAACF,MAAD,EAAS;AACb,WAAOd,QAAQ,CAACiB,MAAT,CAAiB,UAASH,MAAO,EAAjC,CAAP;AACH,GAZiB;;AAalBI,EAAAA,UAAU,CAACJ,MAAD,EAAS;AACf,WAAOf,KAAK,CAACU,GAAN,CAAW,uDAAD,GAAyDK,MAAnE,CAAP;AACH,GAfiB;;AAgBlBK,EAAAA,SAAS,CAACL,MAAD,EAAS;AACd,WAAOf,KAAK,CAACU,GAAN,CAAW,8DAAD,GAAgEK,MAA1E,CAAP;AACH,GAlBiB;;AAmBlBM,EAAAA,YAAY,CAACC,MAAD,EAAS;AACjB,WAAOrB,QAAQ,CAACsB,GAAT,CAAc,gBAAd,EAA+B;AAAED,MAAAA,MAAM,EAAEA;AAAV,KAA/B,CAAP;AACH,GArBiB;;AAsBlBE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,WAAOxB,QAAQ,CAACsB,GAAT,CAAc,SAAd,EAAwBE,OAAxB,CAAP;AACH,GAxBiB;;AAyBlBC,EAAAA,SAAS,CAACC,SAAD,EAAY;AACjB,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,SAAzB,EAFiB,CAEmB;;AAEpC,WAAO1B,QAAQ,CAACsB,GAAT,CAAc,eAAd,EAA8BK,QAA9B,EAAwC;AAAC;AAC5CxB,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADkC,KAAxC,CAAP;AAKC,GAlCa;;AAmClB2B,EAAAA,WAAW,GAAG;AACV,WAAO9B,QAAQ,CAACS,GAAT,CAAc,SAAd,CAAP;AACH,GArCiB;;AAsClBsB,EAAAA,KAAK,CAACC,KAAD,EAAQC,QAAR,EAAkBC,UAAU,GAAG,KAA/B,EAAsCC,OAAO,GAAG,IAAhD,EAAuD;AACxD,WAAOnC,QAAQ,CAACe,IAAT,CAAe,YAAf,EAA4B;AAAEiB,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,UAAnB;AAA+BC,MAAAA;AAA/B,KAA5B,CAAP;AACH,GAxCiB;;AAyClBC,EAAAA,MAAM,GAAG;AACL,WAAOpC,QAAQ,CAACiB,MAAT,CAAiB,YAAjB,CAAP;AACH,GA3CiB;;AA4ClBoB,EAAAA,aAAa,GAAG;AACZ,WAAOrC,QAAQ,CAACS,GAAT,CAAc,0BAAd,CAAP;AACH;;AA9CiB,CAAf","sourcesContent":["import * as axios from \"axios\";\n\n\nconst instance = axios.create({\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"fa719772-b24e-4ef6-9c60-7967252f265b\"\n    },\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\n});\nexport const UserAPI ={\n    getUsers(currentPage =1, pageSize = 10){\n        return instance.get(`users?page=${currentPage}&cout=${pageSize}`,\n            {\n\n            }, {}).then(response => response.data);\n    },\n    Follow(userId) {\n        return instance.post(`follow/${userId}`)\n    },\n    Unfollow(userId) {\n        return instance.delete(`follow/${userId}`)\n    },\n    getProfile(userId) {\n        return axios.get(`https://social-network.samuraijs.com/api/1.0/profile/`+ userId)\n    },\n    getStatus(userId) {\n        return axios.get(`https://social-network.samuraijs.com/api/1.0/profile/status/`+ userId)\n    },\n    updateStatus(status) {\n        return instance.put(`profile/status`, { status: status });\n    },\n    saveProfile(profile) {\n        return instance.put(`profile`, profile);\n    },\n    savePhoto(photoFile) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);//создаем объект и вставляем в него элемент image со значение нашего файла\n\n        return instance.put(`profile/photo`, formData, {//отправляем на profile/photo наш объект, а так же другой объект с элементом Content-Type и значением 'multipart/form-data'//особенности синтексиса для сервака\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n        },\n    authrequire() {\n        return instance.get(`auth/me`);\n    },\n    login(email, password, rememberMe = false, captcha = null ) {\n        return instance.post(`auth/login`, { email, password, rememberMe, captcha });\n    },\n    logout() {\n        return instance.delete(`auth/login`);\n    },\n    getCaptchaUrl() {\n        return instance.get(`security/get-captcha-url`);\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}