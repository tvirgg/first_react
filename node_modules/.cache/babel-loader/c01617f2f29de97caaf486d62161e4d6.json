{"ast":null,"code":"import { UserAPI, UserAPI as API } from \"../../components/users/Api\";\nimport { setProfile } from \"./PostsData-reducer\";\nimport { stopSubmit } from \"redux-form\";\nlet initialstate = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null // if null, then captcha is not required\n\n};\n\nconst Auth_reducer = (state = initialstate, action) => {\n  if (action.type === 'Get_user_data' || action.type === 'Get_captcha_url') {\n    return { ...state,\n      ...action.payload\n    };\n  } else {\n    return state;\n  }\n};\n\nexport const Setuserdata = (id, email, login, isAuth) => {\n  return {\n    type: 'Get_user_data',\n    payload: {\n      id,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: 'Get_captcha_url',\n  payload: {\n    captchaUrl\n  }\n});\nexport const setrequire = () => async dispatch => {\n  let response = await UserAPI.authrequire();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(Setuserdata(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await API.login(email, password, rememberMe, captcha);\n\n  if (response.data.resultCode === 0) {\n    dispatch(setrequire());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await API.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(Setuserdata(null, null, null, false));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await API.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport default Auth_reducer;","map":{"version":3,"sources":["C:/Users/Kainar_malay/Desktop/git_partfolio/kainar_present/first_react/src/redux/state/Auth_reducer.js"],"names":["UserAPI","API","setProfile","stopSubmit","initialstate","id","email","login","isAuth","captchaUrl","Auth_reducer","state","action","type","payload","Setuserdata","getCaptchaUrlSuccess","setrequire","dispatch","response","authrequire","data","resultCode","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","logout","url"],"mappings":"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","sourcesContent":["import {UserAPI, UserAPI as API} from \"../../components/users/Api\";\nimport {setProfile} from \"./PostsData-reducer\";\nimport {stopSubmit} from \"redux-form\";\nlet initialstate = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null // if null, then captcha is not required\n}\nconst Auth_reducer = (state = initialstate, action) =>{\n\n    if (action.type === 'Get_user_data' || action.type === 'Get_captcha_url'){\n      return {\n          ...state,\n          ...action.payload\n      }}\n      else {\n        return state;\n      }\n}\n\nexport const Setuserdata = (id, email, login, isAuth) =>{\n  return{\n      type: 'Get_user_data', payload: {id, email, login, isAuth}\n  }\n}\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({\n    type: 'Get_captcha_url', payload: {captchaUrl}\n});\nexport const setrequire = () => async (dispatch) => {\n    let response = await UserAPI.authrequire();\n            if(response.data.resultCode === 0){\n                let {id, email, login} = response.data.data;\n                dispatch(Setuserdata(id, email, login, true));\n            }\n}\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\n    let response = await API.login(email, password, rememberMe, captcha);\n            if (response.data.resultCode === 0) {\n\n                dispatch(setrequire())\n            }\n            else{\n                if (response.data.resultCode === 10){\n                    dispatch(getCaptchaUrl());\n                }\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n                dispatch(stopSubmit(\"login\", {_error: message}));\n            }\n}\n    export const logout = () => async (dispatch) => {\n        let response = await API.logout();\n                if (response.data.resultCode === 0) {\n                    dispatch(Setuserdata(null, null, null, false));\n                }\n\n}\nexport const getCaptchaUrl = () => async (dispatch) => {\n    const response = await API.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\n}\nexport default Auth_reducer;\n"]},"metadata":{},"sourceType":"module"}