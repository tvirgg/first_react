{"ast":null,"code":"import { useRef } from 'react';\n\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\n\n\nexport default function useStableMemo(factory, deps) {\n  var isValid = true;\n  var valueRef = useRef(); // initial hook call\n\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps: deps,\n      result: factory()\n    }; // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n\n  var cache = isValid ? valueRef.current : {\n    deps: deps,\n    result: factory()\n  }; // must update immediately so any sync renders here don't cause an infinite loop\n\n  valueRef.current = cache;\n  return cache.result;\n}","map":{"version":3,"sources":["C:/Users/Kainar_malay/Desktop/git_partfolio/kainar_present/first_react/node_modules/react-widgets/node_modules/@restart/hooks/esm/useStableMemo.js"],"names":["useRef","isEqual","a","b","length","i","useStableMemo","factory","deps","isValid","valueRef","current","result","cache"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;;AAEA,SAASC,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B,OAAO,KAAP;;AAE3B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,CAACE,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AACjC,QAAIH,CAAC,CAACG,CAAD,CAAD,KAASF,CAAC,CAACE,CAAD,CAAd,EAAmB;AACjB,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;;;;;;;AAQA,eAAe,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;AACnD,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,QAAQ,GAAGV,MAAM,EAArB,CAFmD,CAE1B;;AAEzB,MAAI,CAACU,QAAQ,CAACC,OAAd,EAAuB;AACrBD,IAAAA,QAAQ,CAACC,OAAT,GAAmB;AACjBH,MAAAA,IAAI,EAAEA,IADW;AAEjBI,MAAAA,MAAM,EAAEL,OAAO;AAFE,KAAnB,CADqB,CAIlB;AACJ,GALD,MAKO;AACLE,IAAAA,OAAO,GAAG,CAAC,EAAED,IAAI,IAAIE,QAAQ,CAACC,OAAT,CAAiBH,IAAzB,IAAiCP,OAAO,CAACO,IAAD,EAAOE,QAAQ,CAACC,OAAT,CAAiBH,IAAxB,CAA1C,CAAX;AACD;;AAED,MAAIK,KAAK,GAAGJ,OAAO,GAAGC,QAAQ,CAACC,OAAZ,GAAsB;AACvCH,IAAAA,IAAI,EAAEA,IADiC;AAEvCI,IAAAA,MAAM,EAAEL,OAAO;AAFwB,GAAzC,CAbmD,CAgBhD;;AAEHG,EAAAA,QAAQ,CAACC,OAAT,GAAmBE,KAAnB;AACA,SAAOA,KAAK,CAACD,MAAb;AACD","sourcesContent":["import { useRef } from 'react';\n\nfunction isEqual(a, b) {\n  if (a.length !== b.length) return false;\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Identical to `useMemo` _except_ that it provides a semantic guarantee that\n * values will not be invalidated unless the dependencies change. This is unlike\n * the built in `useMemo` which may discard memoized values for performance reasons.\n *\n * @param factory A function that returns a value to be memoized\n * @param deps A dependency array\n */\nexport default function useStableMemo(factory, deps) {\n  var isValid = true;\n  var valueRef = useRef(); // initial hook call\n\n  if (!valueRef.current) {\n    valueRef.current = {\n      deps: deps,\n      result: factory()\n    }; // subsequent calls\n  } else {\n    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));\n  }\n\n  var cache = isValid ? valueRef.current : {\n    deps: deps,\n    result: factory()\n  }; // must update immediately so any sync renders here don't cause an infinite loop\n\n  valueRef.current = cache;\n  return cache.result;\n}"]},"metadata":{},"sourceType":"module"}