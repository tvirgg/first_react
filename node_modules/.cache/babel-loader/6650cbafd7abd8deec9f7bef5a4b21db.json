{"ast":null,"code":"import { useRef } from 'react';\nimport useStableMemo from './useStableMemo';\nimport useWillUnmount from './useWillUnmount';\n/**\n * An _immediate_ effect that runs an effect callback when its dependency array\n * changes. This is helpful for updates should must run during render, most\n * commonly state derived from props; a more ergonomic version of https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n *\n * ```ts\n * function Example({ value }) {\n *   const [intermediaryValue, setValue] = useState(value);\n *\n *   useImmediateUpdateEffect(() => {\n *     setValue(value)\n *   }, [value])\n * ```\n *\n * @category effects\n */\n\nfunction useImmediateUpdateEffect(effect, deps) {\n  var firstRef = useRef(true);\n  var tearDown = useRef();\n  useWillUnmount(function () {\n    if (tearDown.current) tearDown.current();\n  });\n  useStableMemo(function () {\n    if (firstRef.current) {\n      firstRef.current = false;\n      return;\n    }\n\n    if (tearDown.current) tearDown.current();\n    tearDown.current = effect();\n  }, deps);\n}\n\nexport default useImmediateUpdateEffect;","map":{"version":3,"sources":["C:/Users/Kainar_malay/Desktop/git_partfolio/kainar_present/first_react/node_modules/react-widgets/node_modules/@restart/hooks/esm/useImmediateUpdateEffect.js"],"names":["useRef","useStableMemo","useWillUnmount","useImmediateUpdateEffect","effect","deps","firstRef","tearDown","current"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA;;;;;;;;;;;;;;;;;AAiBA,SAASC,wBAAT,CAAkCC,MAAlC,EAA0CC,IAA1C,EAAgD;AAC9C,MAAIC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAArB;AACA,MAAIO,QAAQ,GAAGP,MAAM,EAArB;AACAE,EAAAA,cAAc,CAAC,YAAY;AACzB,QAAIK,QAAQ,CAACC,OAAb,EAAsBD,QAAQ,CAACC,OAAT;AACvB,GAFa,CAAd;AAGAP,EAAAA,aAAa,CAAC,YAAY;AACxB,QAAIK,QAAQ,CAACE,OAAb,EAAsB;AACpBF,MAAAA,QAAQ,CAACE,OAAT,GAAmB,KAAnB;AACA;AACD;;AAED,QAAID,QAAQ,CAACC,OAAb,EAAsBD,QAAQ,CAACC,OAAT;AACtBD,IAAAA,QAAQ,CAACC,OAAT,GAAmBJ,MAAM,EAAzB;AACD,GARY,EAQVC,IARU,CAAb;AASD;;AAED,eAAeF,wBAAf","sourcesContent":["import { useRef } from 'react';\nimport useStableMemo from './useStableMemo';\nimport useWillUnmount from './useWillUnmount';\n/**\n * An _immediate_ effect that runs an effect callback when its dependency array\n * changes. This is helpful for updates should must run during render, most\n * commonly state derived from props; a more ergonomic version of https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n *\n * ```ts\n * function Example({ value }) {\n *   const [intermediaryValue, setValue] = useState(value);\n *\n *   useImmediateUpdateEffect(() => {\n *     setValue(value)\n *   }, [value])\n * ```\n *\n * @category effects\n */\n\nfunction useImmediateUpdateEffect(effect, deps) {\n  var firstRef = useRef(true);\n  var tearDown = useRef();\n  useWillUnmount(function () {\n    if (tearDown.current) tearDown.current();\n  });\n  useStableMemo(function () {\n    if (firstRef.current) {\n      firstRef.current = false;\n      return;\n    }\n\n    if (tearDown.current) tearDown.current();\n    tearDown.current = effect();\n  }, deps);\n}\n\nexport default useImmediateUpdateEffect;"]},"metadata":{},"sourceType":"module"}